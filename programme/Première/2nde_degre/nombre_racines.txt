i = randint(0, 5)
if i ==  0:
    a = randint(-10, 10)
    b = randint(-10, 10)
    while a == 0 or a == 1:
        a = randint(-10, 10)
    a = Fraction(a, 1)
    b = Fraction(b, 1)
    c = Fraction(0, 1)
elif i == 1:
    a = randint(-10, 10)
    c = randint(-20, 20)
    while a == 0 or a == 1 or a*c >= 0 or c == 0:
        a = randint(-10, 10)
        c = randint(-10, 10)
    a = Fraction(a, 1)
    b = Fraction(0, 1)
    c = Fraction(c, 1)
elif i == 2:
    a = randint(-10, 10)
    c = randint(-10, 10)
    while (a == 0 or a == 1) or a*c <= 0 or c == 0:
        a = randint(-10, 10)
        c = randint(-10, 10)
    a = Fraction(a, 1)
    b = Fraction(0, 1)
    c = Fraction(c, 1)
elif i == 3:
    a = randint(-10, 10)
    b = randint(-10, 10)
    c = randint(-10, 10)
    while (a == 0 or a == 1) or (b**2-4*a*c >= 0) or b == 0 or c == 0:
        a = randint(-10, 10)
        b = randint(-10, 10)
        c = randint(-10, 10)
    a = Fraction(a, 1)
    b = Fraction(b, 1)
    c = Fraction(c, 1)
elif i == 4:
    a = randint(-10, 10)
    b = randint(-10, 10)
    c = randint(-10, 10)
    while (a == 0 or a == 1) or (b**2-4*a*c != 0) or b == 0 or c == 0:
        a = randint(-10, 10)
        b = randint(-10, 10)
        c = randint(-10, 10)
    a = Fraction(a, 1)
    b = Fraction(b, 1)
    c = Fraction(c, 1)
elif i == 5:
    a = randint(-10, 10)
    x1 = randint(-10, 10)
    x2 = randint(-10, 10)
    while a == 0:
        a = randint(-10, 10)
    while x1 == 0:   
        x1 = randint(-10, 10)
    while x2 == 0 or x2 == -x1:  
        x2 = randint(-10, 10)
    a = Fraction(a, 1)
    b = Fraction(-a*(x1+x2), 1)
    c = Fraction(a*x1*x2, 1)
else:
    a = randint(-10, 10)
    b = randint(-10, 10)
    c = randint(-10, 10)
    d1, d2 = simplification_racine(1, b**2-4*a*c)
    while (a == 0 or a == 1) or (b**2-4*a*c <= 0) or d2 == 1 or b == 0 or c == 0:
        a = randint(-10, 10)
        b = randint(-10, 10)
        c = randint(-10, 10)  
        d1, d2 = simplification_racine(1, b**2-4*a*c)

    a = Fraction(a, 1)
    b = Fraction(b, 1)
    c = Fraction(c, 1)
self.frame_init()
self.add("Soit $f$ la fonction définie sur $\\mathbb{R}$ par $f(x) = ", cor = False)
self.add_frac(a, coef = True, cor = False)
self.add("x^2", cor = False)
if b.numerator != 0:
    self.add_frac_somme(b, coef = True, cor = False)
    self.add("x", cor = False)
if c.numerator != 0:
    self.add_frac_somme(c, cor = False)
self.add("$. \n\n$f$ admet-il une forme factorisée? Si oui, préciser la méthode de factorisation utilisée.", cor = False)

self.add("$f$ est un polynôme de degré $2$ dont les coefficients sont $a =")
self.add_frac(a)
self.add(", \\; b =")
self.add_frac(b)
self.add("$ et $c =")
self.add_frac(c)
self.add("$.\n \n")

if c.numerator == 0: #Cas 1: f(x) = ax^2+bx
    self.add("J'observe que le coefficient du terme constant de $f$ est égal à $0$. Je factorise donc par $")
    self.add_frac(a, True)
    self.add("x$ et je trouve la forme factorisée de $f$: \\[ f(x) = ")

    self.add_frac(a, True)
    self.add("x^2")
    self.add_frac_somme(b, True)
    self.add("x = ")

    self.add_frac(a, True)
    self.add("x \\left(x")
    self.add_frac_somme(b/a)
    self.add("\\right)\\] $f$ admet donc deux racines distinctes.")

elif b.numerator == 0 and a*c < 0: #cas 2
    self.add("J'observe que le coefficient du terme en $x$ de $f$ est égal à $0$. De plus le coefficient devant $x^2$ et le terme constant n'ont pas le même signe. Je peux donc factoriser à l'aide d'une identité remarquable:\n")

    self.add("\\begin{align*} f(x) &=")
    self.add_frac(a, True)
    self.add("x^2")
    self.add_frac_somme(c)
    self.add("\\\\ \n &=")

    self.add_frac(a, True)
    self.add("\\left(x^2")
    self.add_frac_somme(c/a)
    self.add("\\right) \\\\ \n &=")

    self.add_frac(a, True)
    self.add("\\left[x^2-")
    if (c/a).denominator != 1:
        self.add("\\left(\\sqrt{")
        self.add_frac(-c/a)
        self.add("}\\right)^2")
    else:
        self.add("\\left(\\sqrt{")
        self.add_frac(-c/a)
        self.add("}\\right)^2")
    self.add("\\right] \\\\ \n &=")

    self.add_frac(a, True)
    self.add("\\left(x-")
    self.add_racine_frac(-c/a)
    self.add("\\right)\\left(x+")
    self.add_racine_frac(-c/a)
    self.add("\\right)")

    self.add("\\end{align*} $f$ admet donc deux racines distinctes.")

elif b.numerator == 0 and a*c > 0:
    self.add("\n\n Pour tout réel $x$, $f(x)=")
    self.add_frac(a, True)
    self.add("x^2")
    self.add_frac_somme(c)
    if a.numerator < 0:
        self.add("<")
    else:
        self.add(">")

    self.add("0$ par somme de termes ")
    if a.numerator < 0:
        self.add("négatifs")
    else:
        self.add("positifs")
    self.add(".\n\n Ainsi, $f$ ne possède pas de racines réelles.")


else:
    self.add("J'observe que les trois coefficients du polynômes sont non nuls. J'applique donc la méthode du discriminant. \n \nOn a $\\Delta = b^2-4ac =")
    if b.numerator < 0:
        self.add("(")
        self.add_frac(b)
        self.add(")")
    else:
        self.add_frac(b)

    self.add("^2-4 \\times")
    if a.numerator < 0:
        self.add("\\left(")
        self.add_frac(a)
        self.add("\\right)")
    else:
        self.add_frac(a)
    self.add("\\times")
    if c.numerator < 0:
        self.add("\\left(")
        self.add_frac(c)
        self.add("\\right)")
    else:
        self.add_frac(c)
    self.add("=")
    self.add_frac(b**2)
    self.add_frac_somme(-4*a*c)
    self.add(" = ")
    self.add_frac(b**2-4*a*c)

    if (b**2-4*a*c).numerator < 0:
        self.add("<0")
    elif (b**2-4*a*c).numerator > 0:
        self.add(">0")

    self.add("$.\n\n")

    if (b**2-4*a*c).numerator < 0:
        self.add("Donc $f$ ne possède pas de racines réelles.")
    elif (b**2-4*a*c).numerator == 0:
        self.add("Donc $f$ admet une unique racine.")
    else: #Discriminant positif
        
        self.add("Donc $f$ admet deux racines distinctes.")
self.frame_end() 