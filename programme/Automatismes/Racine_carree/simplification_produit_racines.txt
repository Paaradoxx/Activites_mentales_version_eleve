a=randint(2,15)
e=randint(2,5)
self.frame_init()
self.add("Simplifier le calcul suivant : \n \n $",False)
self.add("Simplifier le calcul suivant : \n \n $")
L=[]
for i in range(e): 
    b=randint(1,3)
    L.append(b)
    self.add_coef(b,False)
    self.add("\\sqrt{",False)
    self.add_nombre(a,False)
    if i==e-1:
        self.add("} $",False)
    else : 
        self.add("} \\times ",False)
    self.add_coef(b)
    self.add("\\sqrt{")
    self.add_nombre(a)
    if i==e-1:
        self.add("} $")
    else : 
        self.add("} \\times ") 
self.add("\n \n Ici, on a ")
self.add_nombre(e)
self.add(" fois la racine carrée de ")
self.add_nombre(a)
if e%2==0:
    self.add(" qui est un nombre pair. On peut donc regrouper les racines deux par deux et il n'y aura plus de racine après la simplification. Ainsi, on a : \n \n $ ")
else :
    self.add(" qui est un nombre impair. Le résultat gardera donc une racine carrée mais on regroupe autant de racines deux par deux. Ainsi, on a : \n \n $ ") 
for i in range(e): 
    self.add_nombre(L[i])
    self.add("\\times ")
if e==2: 
    self.add_nombre(a)
elif e==4 :
    self.add_nombre(a)
    self.add("\\times ")
    self.add_nombre(a)
elif e==3:
    self.add_nombre(a)
    self.add("\\times \\sqrt{")
    self.add_nombre(a)
    self.add("}")
else: 
    self.add_nombre(a)
    self.add("\\times ")
    self.add_nombre(a)
    self.add("\\times \\sqrt{")
    self.add_nombre(a)
    self.add("}")
self.add("=")
s=L[0]
for i in range(1,len(L)):
    s=s*L[i]
if e==2: 
    self.add_nombre(s*a)
elif e==4 :
    self.add_nombre(s*a*a)
elif e==3:
    self.add_nombre(s*a)
    self.add("\\sqrt{")
    self.add_nombre(a)
    self.add("}")
else: 
    self.add_nombre(s*a*a)
    self.add(" \\sqrt{")
    self.add_nombre(a)
    self.add("}")
if e==3 or i==5 :
    x,y=simplification_racine(1,a)
    if x!=1:
        if e==3:
            if y==1:
                self.add("=")
                self.add_nombre(s*a*x)
            else :
                self.add("=")
                self.add_nombre(s*a*x)
                self.add("\\sqrt{")
                self.add_nombre(y)
                self.add("}")
        else: 
            if y==1 :
                self.add("=")
                self.add_nombre(s*a*a*x)
            else : 
                self.add("=")
                self.add_nombre(s*a*a*x)
                self.add(" \\sqrt{")
                self.add_nombre(y)
                self.add("}")
self.add("$")
self.frame_end()