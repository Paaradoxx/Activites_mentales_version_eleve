a = randint(-12, 12)
b = randint(1, 12)
c = randint(-10, 10)
d = randint(1, 10)
while a == 0:
    a = randint(-12, 12)
while b == 0 or a%b == 0:
    b = randint(1, 12)
while c == 0:
    c = randint(-10, 10)
while c%d==0 :
    d = randint(1, 10)
a = Fraction(a, b)
b = Fraction(c, d)

self.frame_init()
self.add("\tFaire le calcul suivant \\[", False)
self.add_frac(a, cor = False)
self.add_frac_somme(b, cor = False)
self.add("\]\n", False)
if gcd(a.denominator,b.denominator)==1:
    self.add("Les dénominateurs ne sont pas multiples l'un de l'autre, ainsi : ")
    self.add("\t\\begin{align*}\n\t\t", True)
    self.add_frac(a, cor = True)
    self.add_frac_somme(b, cor = True)
    self.add("&=\\dfrac{", True)
    self.add_nombre_produit(a.numerator, cor = True)
    self.add("\\times", True)
    self.add_nombre_produit(b.denominator, cor = True)
    self.add("}{", True)
    self.add_nombre_produit(a.denominator, cor = True)
    self.add("\\times", True)
    self.add_nombre_produit(b.denominator, cor = True)
    self.add("} + \\dfrac{", True)
    self.add_nombre_produit(b.numerator, cor = True)
    self.add("\\times", True)
    self.add_nombre_produit(a.denominator, cor = True)
    self.add("}{", True)
    self.add_nombre_produit(b.denominator, cor = True)
    self.add("\\times", True)
    self.add_nombre_produit(a.denominator, cor = True)
    self.add("}\\\\[1ex]\n\t\t&=\dfrac{", True)
    self.add_nombre(a.numerator*b.denominator, cor = True)
    self.add("}{", True)
    self.add_nombre(a.denominator*b.denominator, cor = True)
    self.add("}+\\dfrac{", True)
    self.add_nombre(b.numerator*a.denominator, cor = True)
    self.add("}{", True)
    self.add_nombre(a.denominator*b.denominator, cor = True)
    self.add("}\\\\[1ex]\n\t\t&=\\dfrac{", True)
    self.add_nombre(a.numerator*b.denominator, cor = True)
    self.add_nombre_somme(b.numerator*a.denominator, cor = True)
    self.add("}{", True)
    self.add_nombre(a.denominator*b.denominator, cor = True)
    self.add("}=", True)
    self.add_frac(a+b, cor = True)
    self.add("\n\t\\end{align*}\n", True)
elif a.denominator == b.denominator:
    self.add("Les dénominateurs sont égaux, il faut simplement additionner les numérateurs")
    self.add("\t\\begin{align*}\n\t\t", True)
    self.add_frac(a, cor = True)
    self.add_frac_somme(b, cor = True)
    self.add("&=", True)
    self.add("\\dfrac{")
    self.add_nombre(a.numerator)
    self.add_nombre_somme(b.numerator)
    self.add("}{")
    self.add_nombre(a.denominator)
    self.add("}=", True)
    self.add_frac(a+b, cor = True)
    self.add("\n\t\\end{align*}\n", True)

elif a.denominator % b.denominator ==0 or b.denominator % a.denominator ==0 :
    if a.denominator > b.denominator :
        self.add_nombre(a.denominator)
        self.add(" est un multiple de ")
        self.add_nombre(b.denominator)
        s=a.denominator//b.denominator
        self.add("\t\\begin{align*}\n\t\t", True)
        self.add_frac(a, cor = True)
        self.add_frac_somme(b, cor = True)
        self.add("&=", True)
        self.add_frac(a, cor = True)
        self.add("+ \\dfrac{", True)
        self.add_nombre_produit(b.numerator, cor = True)
        self.add("\\times", True)
        self.add_nombre_produit(s, cor = True)
        self.add("}{", True)
        self.add_nombre_produit(b.denominator, cor = True)
        self.add("\\times", True)
        self.add_nombre_produit(s, cor = True)
        self.add("}\\\\[1ex]\n\t\t&=\dfrac{", True)
        self.add_nombre(a.numerator)
        self.add_nombre_somme(b.numerator*s)
        self.add("}{")
        self.add_nombre(a.denominator)
        self.add("}=", True)
        self.add_frac(a+b, cor = True)
        self.add("\n\t\\end{align*}\n", True)
    else :
        self.add_nombre(b.denominator)
        self.add(" est un multiple de ")
        self.add_nombre(a.denominator)
        s=b.denominator//a.denominator
        self.add("\t\\begin{align*}\n\t\t", True)
        self.add_frac(a, cor = True)
        self.add_frac_somme(b, cor = True)
        self.add("&=", True)
        self.add("\\dfrac{", True)
        self.add_nombre_produit(a.numerator, cor = True)
        self.add("\\times", True)
        self.add_nombre_produit(s, cor = True)
        self.add("}{", True)
        self.add_nombre_produit(a.denominator, cor = True)
        self.add("\\times", True)
        self.add_nombre_produit(s, cor = True)
        self.add("}+")
        self.add_frac(b, cor = True)
        self.add("\\\\[1ex]\n\t\t&=\dfrac{", True)
        self.add_nombre(a.numerator*s)
        self.add_nombre_somme(b.numerator)
        self.add("}{")
        self.add_nombre(b.denominator)
        self.add("}=", True)
        self.add_frac(a+b, cor = True)
        self.add("\n\t\\end{align*}\n", True)
else :
    p=gcd(a.denominator,b.denominator)
    c=a.denominator//p
    d=b.denominator//p
    self.add("Les deux dénominateurs ont un diviseur commun qui est ")
    self.add_nombre(p)
    self.add(". On a donc $")
    self.add_nombre(a.denominator)
    self.add("=")
    self.add_nombre(p)
    self.add("\\times")
    self.add_nombre(c)
    self.add("$ et $")
    self.add_nombre(b.denominator)
    self.add("=")
    self.add_nombre(p)
    self.add("\\times")
    self.add_nombre(d)
    self.add("$")
    self.add("\t\\begin{align*}\n\t\t", True)
    self.add_frac(a, cor = True)
    self.add_frac_somme(b, cor = True)
    self.add("&=\\dfrac{", True)
    self.add_nombre_produit(a.numerator, cor = True)
    self.add("\\times", True)
    self.add_nombre_produit(d, cor = True)
    self.add("}{", True)
    self.add_nombre_produit(p, cor = True)
    self.add("\\times", True)
    self.add_nombre_produit(c, cor = True)
    self.add("\\times", True)
    self.add_nombre_produit(d, cor = True)
    self.add("} + \\dfrac{", True)
    self.add_nombre_produit(b.numerator, cor = True)
    self.add("\\times", True)
    self.add_nombre_produit(c, cor = True)
    self.add("}{", True)
    self.add_nombre_produit(p, cor = True)
    self.add("\\times")
    self.add_nombre_produit(d, cor = True)
    self.add("\\times", True)
    self.add_nombre_produit(c, cor = True)
    self.add("}\\\\[1ex]\n\t\t&=\dfrac{", True)
    self.add_nombre(a.numerator*d, cor = True)
    self.add("}{", True)
    self.add_nombre(a.denominator*d, cor = True)
    self.add("}+\\dfrac{", True)
    self.add_nombre(b.numerator*c, cor = True)
    self.add("}{", True)
    self.add_nombre(b.denominator*c, cor = True)
    self.add("}\\\\[1ex]\n\t\t&=\\dfrac{", True)
    self.add_nombre(a.numerator*d, cor = True)
    self.add_nombre_somme(b.numerator*d, cor = True)
    self.add("}{", True)
    self.add_nombre(a.denominator*d, cor = True)
    self.add("}=", True)
    self.add_frac(a+b, cor = True)
    self.add("\n\t\\end{align*}\n", True)
self.frame_end()